package kr.nomad.mars.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.Bbs;
import kr.nomad.mars.dto.ChatRoom;

public class ChatRoomDao {
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper chatroomMapper = new RowMapper() {
		public ChatRoom mapRow(ResultSet rs, int rowNum) throws SQLException {
			ChatRoom chatroom = new ChatRoom();
			chatroom.setChatRoomSeq(rs.getInt("chat_room_seq"));
			chatroom.setChatRoomType(rs.getInt("chat_room_type"));
			chatroom.setOwnerId(rs.getString("owner_id"));
			chatroom.setRegDate(rs.getString("reg_date"));
			chatroom.setLastMsgSeq(rs.getString("last_msg_seq"));
			chatroom.setTitle(rs.getString("title"));
			chatroom.setReplyId(rs.getString("reply_id"));
			chatroom.setfMatchingSeq(rs.getInt("f_matching_seq"));
			chatroom.setItemCount(rs.getInt("item_count"));
			chatroom.setAge(rs.getString("age"));
			chatroom.setArea(rs.getString("area"));
		
			chatroom.setMemberLimit(rs.getInt("member_limit"));
			chatroom.setMemberCount(rs.getInt("member_count"));
			chatroom.setIsOneone(rs.getInt("is_oneone"));
			chatroom.setIsAnonym(rs.getInt("is_anonym"));
			chatroom.setOnlyOppositeSex(rs.getInt("only_opposite_sex"));
			chatroom.setUseMegaphoneDate(rs.getString("use_megaphone_date"));
			chatroom.setUseFreeTicket(rs.getInt("use_free_ticket"));
			chatroom.setUserName(rs.getString("user_name"));
			chatroom.setNickName(rs.getString("nick_name"));
			chatroom.setGender(rs.getInt("gender"));
			chatroom.setPhoto(rs.getString("photo"));
			chatroom.setLatitude(rs.getDouble("latitude"));
			chatroom.setLongitude(rs.getDouble("longitude"));
			chatroom.setPhoneNumber(rs.getString("phone_number"));
			chatroom.setAgentId(rs.getString("agent_id"));
			chatroom.setAgentName(rs.getString("agent_name"));
			return chatroom;
		}
	};
	
	private RowMapper mychatroomMapper = new RowMapper() {
		public ChatRoom mapRow(ResultSet rs, int rowNum) throws SQLException {
			ChatRoom chatroom = new ChatRoom();
			chatroom.setChatRoomSeq(rs.getInt("chat_room_seq"));
			chatroom.setChatRoomType(rs.getInt("chat_room_type"));
			chatroom.setOwnerId(rs.getString("owner_id"));
			chatroom.setRegDate(rs.getString("reg_date"));
			chatroom.setLastMsgSeq(rs.getString("last_msg_seq"));
			chatroom.setTitle(rs.getString("title"));
			chatroom.setReplyId(rs.getString("reply_id"));
			chatroom.setfMatchingSeq(rs.getInt("f_matching_seq"));
			chatroom.setItemCount(rs.getInt("item_count"));
			chatroom.setAge(rs.getString("age"));
			chatroom.setArea(rs.getString("area"));
		
			chatroom.setMemberLimit(rs.getInt("member_limit"));
			chatroom.setMemberCount(rs.getInt("member_count"));
			chatroom.setIsOneone(rs.getInt("is_oneone"));
			chatroom.setIsAnonym(rs.getInt("is_anonym"));
			chatroom.setOnlyOppositeSex(rs.getInt("only_opposite_sex"));
			chatroom.setUseMegaphoneDate(rs.getString("use_megaphone_date"));
			chatroom.setUseFreeTicket(rs.getInt("use_free_ticket"));
			chatroom.setUserName(rs.getString("user_name"));
			chatroom.setNickName(rs.getString("nick_name"));
			chatroom.setGender(rs.getInt("gender"));
			chatroom.setPhoto(rs.getString("photo"));
			chatroom.setLatitude(rs.getDouble("latitude"));
			chatroom.setLongitude(rs.getDouble("longitude"));
			chatroom.setPhoneNumber(rs.getString("phone_number"));
			chatroom.setAgentId(rs.getString("agent_id"));
			chatroom.setAgentName(rs.getString("agent_name"));
			chatroom.setPhotoStatus(rs.getInt("photoStatus"));
			return chatroom;
		}
	};
	
	private RowMapper chatroomMapperdis = new RowMapper() {
		public ChatRoom mapRow(ResultSet rs, int rowNum) throws SQLException {
			ChatRoom chatroom = new ChatRoom();
			chatroom.setChatRoomSeq(rs.getInt("chat_room_seq"));
			chatroom.setChatRoomType(rs.getInt("chat_room_type"));
			chatroom.setOwnerId(rs.getString("owner_id"));
			chatroom.setRegDate(rs.getString("reg_date"));
			chatroom.setLastMsgSeq(rs.getString("last_msg_seq"));
			chatroom.setTitle(rs.getString("title"));
			chatroom.setReplyId(rs.getString("reply_id"));
			chatroom.setfMatchingSeq(rs.getInt("f_matching_seq"));
			chatroom.setItemCount(rs.getInt("item_count"));
			chatroom.setAge(rs.getString("age"));
			chatroom.setArea(rs.getString("area"));
			chatroom.setDistancetxt(rs.getDouble("distance"));
			chatroom.setMemberLimit(rs.getInt("member_limit"));
			chatroom.setMemberCount(rs.getInt("member_count"));
			chatroom.setIsOneone(rs.getInt("is_oneone"));
			chatroom.setIsAnonym(rs.getInt("is_anonym"));
			chatroom.setOnlyOppositeSex(rs.getInt("only_opposite_sex"));
			chatroom.setUseMegaphoneDate(rs.getString("use_megaphone_date"));
			chatroom.setUseFreeTicket(rs.getInt("use_free_ticket"));
			chatroom.setUserName(rs.getString("user_name"));
			chatroom.setNickName(rs.getString("nick_name"));
			chatroom.setGender(rs.getInt("gender"));
			chatroom.setPhoto(rs.getString("photo"));
			chatroom.setLatitude(rs.getDouble("latitude"));
			chatroom.setLongitude(rs.getDouble("longitude"));
			chatroom.setPhoneNumber(rs.getString("phone_number"));
			chatroom.setAgentId(rs.getString("agent_id"));
			chatroom.setAgentName(rs.getString("agent_name"));
			return chatroom;
		}
	};
	private RowMapper chatroomMapper2 = new RowMapper() {
		public ChatRoom mapRow(ResultSet rs, int rowNum) throws SQLException {
			ChatRoom chatroom = new ChatRoom();
			chatroom.setChatRoomSeq(rs.getInt("chat_room_seq"));
			chatroom.setChatRoomType(rs.getInt("chat_room_type"));
			chatroom.setOwnerId(rs.getString("owner_id"));
			chatroom.setRegDate(rs.getString("reg_date"));
			chatroom.setLastMsgSeq(rs.getString("last_msg_seq"));
			chatroom.setTitle(rs.getString("title"));
			chatroom.setReplyId(rs.getString("reply_id"));
			chatroom.setfMatchingSeq(rs.getInt("f_matching_seq"));
			chatroom.setItemCount(rs.getInt("item_count"));
			chatroom.setAge(rs.getString("age"));
			chatroom.setArea(rs.getString("area"));
		
			chatroom.setMemberLimit(rs.getInt("member_limit"));
			chatroom.setMemberCount(rs.getInt("member_count"));
			chatroom.setIsOneone(rs.getInt("is_oneone"));
			chatroom.setIsAnonym(rs.getInt("is_anonym"));
			chatroom.setOnlyOppositeSex(rs.getInt("only_opposite_sex"));
			chatroom.setUseMegaphoneDate(rs.getString("use_megaphone_date"));
			chatroom.setUseFreeTicket(rs.getInt("use_free_ticket"));
			chatroom.setUserName(rs.getString("user_name"));
			chatroom.setNickName(rs.getString("nick_name"));
			chatroom.setGender(rs.getInt("gender"));
			chatroom.setPhoto(rs.getString("photo"));
			chatroom.setLatitude(rs.getDouble("latitude"));
			chatroom.setLongitude(rs.getDouble("longitude"));
			chatroom.setPhoneNumber(rs.getString("phone_number"));
			chatroom.setUseMega(rs.getInt("useMega"));
			return chatroom;
		}
	};
	
	private RowMapper VchatroomMapper = new RowMapper() {
		public ChatRoom mapRow(ResultSet rs, int rowNum) throws SQLException {
			ChatRoom chatroom = new ChatRoom();
			chatroom.setChatRoomSeq(rs.getInt("chat_room_seq"));
			chatroom.setChatRoomType(rs.getInt("chat_room_type"));
			chatroom.setOwnerId(rs.getString("owner_id"));
			chatroom.setRegDate(rs.getString("reg_date"));
			chatroom.setLastMsgSeq(rs.getString("last_msg_seq"));
			chatroom.setTitle(rs.getString("title"));
			chatroom.setReplyId(rs.getString("reply_id"));
			chatroom.setfMatchingSeq(rs.getInt("f_matching_seq"));
			chatroom.setItemCount(rs.getInt("item_count"));
			chatroom.setAge(rs.getString("age"));
			chatroom.setArea(rs.getString("area"));
			chatroom.setDistance(rs.getInt("distance"));
			chatroom.setMemberLimit(rs.getInt("member_limit"));
			chatroom.setMemberCount(rs.getInt("member_count"));
			chatroom.setIsOneone(rs.getInt("is_oneone"));
			chatroom.setIsAnonym(rs.getInt("is_anonym"));
			chatroom.setOnlyOppositeSex(rs.getInt("only_opposite_sex"));
			chatroom.setUseMegaphoneDate(rs.getString("use_megaphone_date"));
			chatroom.setUseFreeTicket(rs.getInt("use_free_ticket"));
			chatroom.setUserName(rs.getString("user_name"));
			chatroom.setNickName(rs.getString("nick_name"));
			chatroom.setGender(rs.getInt("gender"));
			chatroom.setPhoto(rs.getString("photo"));
			chatroom.setLatitude(rs.getDouble("latitude"));
			chatroom.setLongitude(rs.getDouble("longitude"));
			
			return chatroom;
		}
	};

	public int addChatRoom(final ChatRoom chatroom) {
		String query = "" +
				"INSERT INTO T_NF_CHAT_ROOM " +
				"	(chat_room_type, owner_id, reg_date, last_msg_seq, title, reply_id, f_matching_seq, item_count, age, area, member_limit, is_oneone, is_anonym, only_opposite_sex, use_megaphone_date, use_free_ticket) " +
				"VALUES " +
				"	(?, ?, getDate(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "
				+ " SELECT SCOPE_IDENTITY() AS chat_room_seq ";
		return this.jdbcTemplate.queryForInt(query, new Object[] {
			chatroom.getChatRoomType(),
			chatroom.getOwnerId(),
			chatroom.getLastMsgSeq(),
			chatroom.getTitle(),
			chatroom.getReplyId(),
			chatroom.getfMatchingSeq(),
			chatroom.getItemCount(),
			chatroom.getAge(),
			chatroom.getArea(),
			chatroom.getMemberLimit(),
			chatroom.getIsOneone(),
			chatroom.getIsAnonym(),
			chatroom.getOnlyOppositeSex(),
			chatroom.getUseMegaphoneDate(),
			chatroom.getUseFreeTicket()
		});
	}
	//방삭제
	public void deleteChatRoom(int chat_room_seq) {
		String query = "DELETE FROM T_NF_CHAT_ROOM WHERE chat_room_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { chat_room_seq });
	}
	//방장 변경
	public void updateChatRoom(String userId,int chatRoomSeq) { 
		String query = "" + 
				"UPDATE T_NF_CHAT_ROOM SET " +
				"	owner_id = ? " +
				"WHERE chat_room_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {userId,chatRoomSeq});
	}
	//확성기 사용
	public void updateChatRoom(int chatroomseq,String date) { 
		String query = "" + 
				"UPDATE T_NF_CHAT_ROOM SET " +
				"  use_megaphone_date = ? " +
				" WHERE chat_room_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {date,chatroomseq});
	}

	public ChatRoom getChatRoom(int chat_room_seq) {
		String query = "" + 
				"SELECT A.*, "
				+" case when DATEDIFF(DD, use_megaphone_date, getDate()) <= 3 then 1 else 0 end as useMega " +
				" FROM V_NF_CHAT_ROOM as A " +
				" WHERE chat_room_seq = ? ";
		try{
			return (ChatRoom)this.jdbcTemplate.queryForObject(query, new Object[] { chat_room_seq }, this.chatroomMapper2);
		}catch(Exception e){
			return null;
		}
	}

	public List<ChatRoom> getChatRoomList(int page, int itemCountPerPage) {
		String query = "" +
				"SELECT TOP "+ itemCountPerPage +" * " +
				"FROM V_NF_CHAT_ROOM " +
				"WHERE chat_room_seq <= ( " +
				"	SELECT MIN(chat_room_seq) " +
				"	FROM ( " +
				"		SELECT TOP "+ ((page-1) * itemCountPerPage + 1) +" chat_room_seq " +
				"		FROM V_NF_CHAT_ROOM " +
				"		ORDER BY chat_room_seq DESC " +
				"	) AS A) " +
				"ORDER BY chat_room_seq DESC";
		return (List<ChatRoom>)this.jdbcTemplate.query(query, this.chatroomMapper);
	}

	//내 채팅목록 
	public List<ChatRoom> getmyChatRoomList(String chatRoomSeq) {
		String query = "" +
				"select *,"
				+ " case when photo='' then 0 else 1 end as photoStatus "
				+ " from v_nf_chat_room where chat_room_seq in ("+chatRoomSeq+")";
						
		
		try{
			return (List<ChatRoom>)this.jdbcTemplate.query(query,this.mychatroomMapper);
		}catch(Exception e){
			return new ArrayList();
		}
		
	}
	
	// 확성기를 사용하지 않는 일반 채팅방
	public List<ChatRoom> getChatRoomNormalList(int page, int itemCountPerPage, String keyword, int age, int gender, String area, int distance, Double latitude, Double longitude) {
		String condition = " WHERE chat_room_type in (1,2,3,4) ";
		
		// 방제, 방장 닉네임
		if (keyword.equals("") == false) {
			condition += " AND (A.title like '%"+ keyword +"%' or A.nick_name like '%"+ keyword +"%')";
		}

		// 연령
		if (age > 0) {
			condition += " AND A.age = '"+age+"대'";
		}
		
		// 성별
		if (gender > 0) {
			condition += " AND A.gender = "+ gender;
		}
		
		// 지역
		if (area.equals("") == false) {
			condition += " AND A.area = '"+ area +"'";
		}
		// 정렬
		String order = "order by case when (DATEDIFF(DD, use_megaphone_date, getDate()) <= 3) then use_megaphone_date "
				+ "	else  dateadd(day,-10,getDate())end desc " ;
		String suborder	=" , reg_date desc ";
		
		if (distance ==1 ) {
			suborder =" , (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) ASC ";
		}else if(distance>1){
			condition += " and (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) between 0 and "+distance;
			suborder =" , (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) ASC ";
		}
		
		
		List<Bbs> result = null;
		String query = ""
			+ "	SELECT * FROM ( "
			+ "		SELECT "
			+ "			ROW_NUMBER() OVER("+order+" "+suborder+ ") as row_seq, "
			+ "			A.* "
            + "			, CASE WHEN A.latitude=0 then 0 else (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) END as distance"
           // + "			, case when DATEDIFF(DD, use_megaphone_date, getDate()) <= 3 then 1 else 0 end as useMega "		
			+ "		FROM V_NF_CHAT_ROOM AS A "
			+ "	"+ condition
			+ "	) AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+" ";
		return (List<ChatRoom>)this.jdbcTemplate.query(query, this.chatroomMapperdis);
	}
	

	// 채팅방 갯수
	public int getChatRoomNormalCount(String keyword, int age, int gender, String area, int distance, Double latitude, Double longitude) {
		String condition = " WHERE chat_room_type in (1,2,3,4) ";
		
		// 방제, 방장 닉네임
		if (keyword.equals("") == false) {
			condition += " AND (A.title like '%"+ keyword +"%' or A.nick_name like '%"+ keyword +"%')";
		}

		// 연령
		if (age > 0) {
			condition += " AND A.age = '"+age+"대'";
		}
		
		// 성별
		if (gender > 0) {
			condition += " AND A.gender = "+ gender;
		}
		
		// 지역
		if (area.equals("") == false) {
			condition += " AND A.area = '"+ area +"'";
		}
		
		// 정렬
		String order = "ORDER BY A.chat_room_seq DESC";
		if (distance ==1 ) {
			order =" ORDER BY (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) ASC ";
		}else if(distance >1 ){
			condition += " and (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) between 0 and "+distance;
			order =" ORDER BY (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) ASC ";
		}
		
		String query = ""
			+ "		SELECT "
			+ "			count(*) "
			+ "		FROM V_NF_CHAT_ROOM AS A "
			+ "	"+ condition;
		return this.jdbcTemplate.queryForInt(query);
	}
	
	// 확성기를 사용 채팅방
	public List<ChatRoom> getChatRoomSpeakerList(String keyword, int age, int gender, String area, int distance, Double latitude, Double longitude) {
		String condition = " WHERE (use_megaphone_date is not null AND DATEDIFF(DD, use_megaphone_date, getDate()) <= 3)";
		
		// 방제, 방장 닉네임
		if (keyword.equals("") == false) {
			condition += " AND (A.title like '%"+ keyword +"%' or A.nick_name like '%"+ keyword +"%')";
		}

		// 연령
		if (age > 0) {
			condition += " AND A.age = '"+age+"대";
		}
		
		// 성별
		if (gender > 0) {
			condition += " AND A.gender = "+ gender;
		}
		
		// 지역
		if (area.equals("") == false) {
			condition += " AND A.area = '"+ area +"'";
		}
		// 정렬
			String order = "ORDER BY A.use_megaphone_date DESC";
		// 거리 필터
		if (distance == 0) {
			order =" ORDER BY (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) ASC ";
		}else{
			condition += " and (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) between 0 and "+distance;
			order =" ORDER BY (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) ASC ";
		}
		
		List<Bbs> result = null;
		String query = ""
			+ "		SELECT "
			+ "			ROW_NUMBER() OVER("+order+") as row_seq, "
			+ "			A.* "
            + "			, CASE WHEN A.latitude=0 then 0 else (select dbo.Distance (A.latitude, A.longitude, "+latitude+", "+longitude+")) END as distance"
			+ "		FROM V_NF_CHAT_ROOM AS A "
			+ "	"+ condition;
		return (List<ChatRoom>)this.jdbcTemplate.query(query, this.chatroomMapper);
	}
}
