package kr.nomad.mars;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.nomad.mars.dao.BannerAdDao;
import kr.nomad.mars.dao.BbsCategoryDao;
import kr.nomad.mars.dao.BbsCommentDao;
import kr.nomad.mars.dao.BbsDao;
import kr.nomad.mars.dao.BbsFilesDao;
import kr.nomad.mars.dao.BbsFncDao;
import kr.nomad.mars.dao.BbsVisitDao;
import kr.nomad.mars.dao.ChatRequestDao;
import kr.nomad.mars.dao.DistanceDao;
import kr.nomad.mars.dao.EventCommentDao;
import kr.nomad.mars.dao.EventDao;
import kr.nomad.mars.dao.FaqDao;
import kr.nomad.mars.dao.FriendDao;
import kr.nomad.mars.dao.FriendRequestDao;
import kr.nomad.mars.dao.LevelDao;
import kr.nomad.mars.dao.MessageDao;
import kr.nomad.mars.dao.NoticeDao;
import kr.nomad.mars.dao.PointChangeDao;
import kr.nomad.mars.dao.QnaDao;
import kr.nomad.mars.dao.SidoDao;
import kr.nomad.mars.dao.SiteDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dto.BannerAd;
import kr.nomad.mars.dto.Bbs;
import kr.nomad.mars.dto.BbsComment;
import kr.nomad.mars.dto.BbsFnc;
import kr.nomad.mars.dto.Event;
import kr.nomad.mars.dto.Faq;
import kr.nomad.mars.dto.Message;
import kr.nomad.mars.dto.Notice;
import kr.nomad.mars.dto.Qna;
import kr.nomad.mars.dto.User;
import kr.nomad.util.F;
import kr.nomad.util.ImageUtil;
import kr.nomad.util.Paging;
import kr.nomad.util.Response;
import kr.nomad.util.T;
import kr.nomad.util.file.UniqFileRenamePolicy;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

@Controller
public class PcController {

	@Autowired
	NoticeDao noticeDao;

	@Autowired
	FaqDao faqDao;

	@Autowired
	QnaDao qnaDao;

	@Autowired
	EventDao eventDao;
	
	@Autowired
	EventCommentDao eventCommentDao;
	
	@Autowired
	UserDao userDao;

	@Autowired
	SiteDao siteDao;

	@Autowired
	private SidoDao sidoDao;

	@Autowired
	BbsDao bbsDao;
	
	@Autowired
	private BbsFncDao bbsFncDao;
	
	@Autowired
	LevelDao levelDao;

	@Autowired
	BbsCommentDao bbsCommentDao;

	@Autowired
	BbsFilesDao bbsFilesDao;

	@Autowired
	PointChangeDao pointChangeDao;

	@Autowired
	BbsCategoryDao bbsCategoryDao;

	@Autowired
	FriendDao friendDao;

	@Autowired
	FriendRequestDao friendRequestDao;

	@Autowired
	ChatRequestDao chatRequestDao;

	@Autowired
	BbsVisitDao bbsVisitDao;

	@Autowired MessageDao messageDao;
	@Autowired BannerAdDao bannerAdDao;
	
	@Autowired DistanceDao distanceDao;

	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;
	
	public boolean loginCheck(String userId, String password) {
		boolean result = false;
		boolean userCheck = userDao.correctId(userId);
		
		if (userCheck == true) {
			boolean loginCheck = userDao.correctPw(userId, password);
			if (loginCheck == true) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	// 채팅방
	@RequestMapping("/pc/chat_list.go")
	public String pcChatListController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			@RequestParam(value="password", required=false, defaultValue="") String password, 
			HttpSession session, Model model) {

		
		if ( this.loginCheck(userId, password) ) {
			User user = userDao.getUser(userId);
			session.setAttribute("USER_ID", user.getUserId());
			session.setAttribute("USER_NAME", user.getUserName());

			model.addAttribute("userId", userId);
			return "/pc/chat_list";
		} else {
			return "/pc/not_arrow";
		}
	}

	// 채팅방 생성
	@RequestMapping("/pc/chat_add.go")
	public String pcChatAddController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			@RequestParam(value="password", required=false, defaultValue="") String password, 
			HttpSession session, Model model) {

		if ( this.loginCheck(userId, password) ) {
			User user = userDao.getUser(userId);
			session.setAttribute("USER_ID", user.getUserId());
			session.setAttribute("USER_NAME", user.getUserName());

			model.addAttribute("userId", userId);
			return "/pc/chat_add";
		} else {
			return "/pc/not_arrow";
		}
	}
	
	// 회원 관리 > 가상회원
	@RequestMapping("/pc/chat_user.go")
	public String imagineController(
			@RequestParam(value = "agentId", required = false, defaultValue = "") String agentId,
			HttpSession session, Model model) {

		List location = sidoDao.getSidoList();
		List site = siteDao.getSiteList();
		User user = userDao.getUser(agentId);

		model.addAttribute("user", user);
		model.addAttribute("site", site);
		model.addAttribute("location", location);
		return "/pc/chat_user";
	}

	// 회원 관리 > 가상회원 리스트
	@RequestMapping("/pc/chat_user_list.go")
	public String imagineListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "agentId", required = false, defaultValue = "") String agentId,
			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
			@RequestParam(value = "age", required = false, defaultValue = "0") int age,
			@RequestParam(value = "areaSido", required = false, defaultValue = "") String areaSido,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "colname", required = false, defaultValue = "") String colName,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			HttpSession session, Model model) {

		List<User> list = null;
		int count = 0;

		list = userDao.getUserImagineList(agentId, gender, age, keyword,areaSido, colName, sort, page, ITEM_COUNT_PER_PAGE);
		count = userDao.getImagineCount(agentId, gender, age, keyword,areaSido);

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("agentId", agentId);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "/pc/chat_user_list";
	}

	// 회원 관리 > 가상회원 관리
	@RequestMapping("/pc/chat_user_edit.go")
	public String chatUserEditController(
			@RequestParam(value = "userSeq", required = false, defaultValue = "0") int userSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "0") String userId,
			Model model) {

		User user = null;
		List location = sidoDao.getSidoList();

		if (userSeq == 0) {
			user = new User();
		} else {
			user = userDao.getUser(userId);
		}
		List site = siteDao.getSiteList();
		List chatUserList = userDao.getChatUser();

		model.addAttribute("location", location);
		model.addAttribute("site", site);
		model.addAttribute("user", user);
		model.addAttribute("userSeq", userSeq);
		model.addAttribute("userId", userId);
		model.addAttribute("chatUserList", chatUserList);
		return "/pc/chat_user_edit";
	}

	// 토크
	@RequestMapping("/pc/talk.go")
	public String pcTalkController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			@RequestParam(value="password", required=false, defaultValue="") String password, 
			HttpSession session, Model model) {

		if ( this.loginCheck(userId, password) ) {
			User user = userDao.getUser(userId);
			session.setAttribute("USER_ID", user.getUserId());
			session.setAttribute("USER_NAME", user.getUserName());

			List themeList = bbsCategoryDao.getBbsCategoryList();
			List sidoList = sidoDao.getSidoList();
			List distanceList = distanceDao.getDistanceList();

			model.addAttribute("userId", userId);
			model.addAttribute("themeList", themeList);
			model.addAttribute("sidoList", sidoList);
			model.addAttribute("distanceList", distanceList);
			return "/pc/talk";
		} else {
			return "/pc/not_arrow";
		}
	}

	// 토크 리스트
	@RequestMapping("/pc/talk_list.go")
	public String pcTalkListController(
			@RequestParam(value="page", required=false, defaultValue="1") int page,
			@RequestParam(value="userId", required=false, defaultValue="") String userId,
			@RequestParam(value="category", required=false, defaultValue="0") int category,
			@RequestParam(value="gender", required=false, defaultValue="0") int gender,
			@RequestParam(value="area", required=false, defaultValue="") String area,
			@RequestParam(value="kind", required=false, defaultValue="") String kind,//친구검색인지 아닌지
			@RequestParam(value="sort", required=false, defaultValue="0") int sort,
			@RequestParam(value="keyword", required=false, defaultValue="") String keyword,
			HttpSession session, Model model) {
		
		List bbsList = null;
		int bbsCount = 0;
		String paging = "";
		
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			
				
			
			
			int chk=0;
			String did = "";
			User user = userDao.getUser(userId);
			session.setAttribute("USER_ID", user.getUserId());
			session.setAttribute("USER_NAME", user.getUserName());
			Double latitude = user.getLatitude();
			Double longitude = user.getLongitude();
			bbsList = bbsDao.getBbsList(page, ITEM_COUNT_PER_PAGE, userId, category, keyword, gender, area, sort, latitude, longitude,kind);
			for(int i=0; i<bbsList.size();i++){
				Bbs bbs = (Bbs)bbsList.get(i);
				String file = bbs.getFiles();
				did =bbs.getUserId();
				if(bbs.getKind()==2){//공유글이면
					did = bbs.getWriterId();
				}
				chk = friendDao.getFrcorrect(userId, did);
				if(chk>0){ //친구면
					bbs.setFriendStatus(1);
				}
				chk= bbsFncDao.getBBsCount(bbs.getBbsSeq(),userId,BbsFnc.FNC_TYPE_LIKE,BbsFnc.FNC_TYPE_SHARE_LIKE);
				if(chk>0){//좋아요 상태면
					bbs.setGoodStatus(1);
				}
				
				
				if(!file.equals("")){
					String [] arr = file.split(",");
					ArrayList<String>fileList = new ArrayList<>();
					for(int k=0;k<arr.length;k++){
					
						fileList.add(arr[k]);
					}
					bbs.setFileList(fileList);
					
				}
				
				bbsList.set(i, bbs);
			}
			bbsCount = bbsDao.getCount(category, keyword, gender, area,sort,latitude,longitude,kind,userId);
			paging = Paging.getPaging(page, bbsCount, ITEM_COUNT_PER_PAGE, PAGE_COUNT_PER_PAGING);
			
		}catch(Exception e){
			map.put("result", false);
			map.put("msg", e.getMessage());
		}
		model.addAttribute("userId", userId);
		model.addAttribute("list", bbsList);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "/pc/talk_list";
	}

	// 토크 상세
	@RequestMapping("/pc/talk_view.go")
	public String pcTalkViewController(
			@RequestParam(value="bbsSeq", required=false, defaultValue="1") int bbsSeq,
			HttpSession session, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		
		Bbs bbs = null;
		List commentList = new ArrayList(); 
		List fileList = new ArrayList();
		try{
			bbs = bbsDao.getBbs2(bbsSeq);
			fileList = bbsFilesDao.getBbsList(bbsSeq);
			commentList = bbsCommentDao.getBbsCommentList(bbsSeq, 1, ITEM_COUNT_PER_PAGE);
			
			if(bbs!=null){
				String userid =bbs.getUserId();
				bbs = bbsDao.getBbsView(bbsSeq,userid);
			}
			
			if(bbs!=null){
				if(bbs.getBlindCount()==1){
				
					bbs.setBbsContents("블라인드 처리 된 게시글 입니다.");
					bbs.setFiles("");
					bbs.setThumfile("");
					bbs.setFileCount(0);
					
				}
				if(bbs.getWrite_blind_count()==1){
					bbs.setWriterComment("블라인드 처리 된 게시글 입니다.");
					bbs.setWriterFiles("");
					
					bbs.setWriterThumfiles("");
					
				}
				map.put("bbs", bbs);
				map.put("result", true);
				
				
				
			}else{
				map.put("message", "삭제되었거나 조회할 수 없는 글입니다.");
				map.put("result", true);
			}
			
		}catch(Exception e){
			map.put( "message", e.getMessage());
			map.put("result", false);
		}
		
		model.addAttribute("bbs", bbs);
		model.addAttribute("fileList", fileList);
		model.addAttribute("commentList", commentList);
		return "/pc/talk_view";
	}

	// 토크 작성
	@RequestMapping("/pc/talk_edit.go")
	public String pcTalkEditController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			@RequestParam(value="bbsSeq", required=false, defaultValue="") int bbsSeq, 
			HttpSession session, Model model) {
		List list = bbsCategoryDao.getadminBbsCategoryList();
		Bbs bbs = bbsDao.getBbs(bbsSeq);
		String file = bbs.getFiles();
		if(!file.equals("")){
			
			String [] arr = file.split(",");
			ArrayList<String>fileList = new ArrayList<>();
			for(int k=0;k<arr.length;k++){
			
				fileList.add(arr[k]);
			}
			bbs.setFileList(fileList);
		}
		model.addAttribute("list", list);
		model.addAttribute("userId", userId);
		model.addAttribute("bbs", bbs);
		return "/pc/talk_edit";
	}
	
	// 댓글보기
	@RequestMapping("/pc/talk_comment.go")
	public String pcTalkEditCommentController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			@RequestParam(value="bbsCommentSeq", required=false, defaultValue="0") int bbsCommentSeq, 
			@RequestParam(value="bbsSeq", required=false, defaultValue="0") int bbsSeq, 
			@RequestParam(value="page", required=false, defaultValue="1") int page, 
			HttpSession session, Model model) {
		
			BbsComment bc =bbsCommentDao.getBbsComment(bbsCommentSeq);
		
			List<BbsComment>list = bbsCommentDao.getBbsCommentReplyList(bbsSeq, page, ITEM_COUNT_PER_PAGE, bbsCommentSeq);
			int bbsCount = bbsCommentDao.getReplyCount(bbsSeq, bbsCommentSeq);
			String paging = Paging.getPaging(page, bbsCount, ITEM_COUNT_PER_PAGE,
					PAGE_COUNT_PER_PAGING);

			
			model.addAttribute("commentList", list);
			model.addAttribute("userId", userId);
			model.addAttribute("bbsSeq", bbsSeq);
			model.addAttribute("currentPage", page);
			model.addAttribute("bbs", bc);
			model.addAttribute("paging", paging);
			
		return "/pc/talk_comment_view";
	}

	// 알림내역
	@RequestMapping("/pc/notice.go")
	public String pcNoticeController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId, 
			@RequestParam(value="password", required=false, defaultValue="") String password, 
			HttpSession session, Model model
		) {

		if ( this.loginCheck(userId, password) ) {
			User user = userDao.getUser(userId);
			session.setAttribute("USER_ID", user.getUserId());
			session.setAttribute("USER_NAME", user.getUserName());

			model.addAttribute("userId", userId);
			return "/pc/notice";
		} else {
			return "/pc/not_arrow";
		}
	}
	
	// 알림내역 리스트
	@RequestMapping("/pc/notice_list.go")
	public String pcNoticeListController(
			@RequestParam(value = "userId", required = false, defaultValue = "0") String userId,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			HttpSession session, Model model
		) {
		
		/*List<Message> list = messageDao.getMessageAdminList(userId, page, ITEM_COUNT_PER_PAGE);
		int count = messageDao.getAdminCount(userId);
		
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		*/

		model.addAttribute("userId", userId);
	
		model.addAttribute("currentPage", page);
	
	/*	model.addAttribute("paging", paging);
		model.addAttribute("list", list);
		model.addAttribute("count", count);
		*/
		return "/pc/notice_list";
	}
	
	//알림내역
	@RequestMapping("/pc/message_visited_all.go")
	public String messageListAllController(
			@RequestParam(value="userId", required=false, defaultValue="") String userId,
			HttpServletRequest req, HttpServletResponse res
	){
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			List<User> userList = userDao.getAgentUser(userId);
			for(int i=0;i<userList.size();i++){
				User uu = userList.get(i);
				messageDao.updateMessageView(uu.getUserId());
			}
			
			map.put("result", true);
			map.put("message", "모든 알림이 읽음 처리되었습니다.");
		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, map);
		return null;
	}
	
	
}
