package kr.nomad.mars.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.ChatRoom;

public class ChatRoomDao {
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper chatroomMapper = new RowMapper() {
		public ChatRoom mapRow(ResultSet rs, int rowNum) throws SQLException {
			ChatRoom chatroom = new ChatRoom();
			chatroom.setChatRoomSeq(rs.getInt("chat_room_seq"));
			chatroom.setChatRoomType(rs.getInt("chat_room_type"));
			chatroom.setOwnerId(rs.getString("owner_id"));
			chatroom.setRegDate(rs.getString("reg_date"));
			chatroom.setLastMsgSeq(rs.getString("last_msg_seq"));
			chatroom.setTitle(rs.getString("title"));
			chatroom.setReplyId(rs.getString("reply_id"));
			chatroom.setfMatchingSeq(rs.getInt("f_matching_seq"));
			chatroom.setItemCount(rs.getInt("item_count"));
			return chatroom;
		}
	};

	public void addChatRoom(final ChatRoom chatroom) {
		String query = "" +
				"INSERT INTO T_NF_CHAT_ROOM " +
				"	(chat_room_seq, chat_room_type, owner_id, reg_date, last_msg_seq, title, reply_id, f_matching_seq, item_count) " +
				"VALUES " +
				"	(?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			chatroom.getChatRoomSeq(),
			chatroom.getChatRoomType(),
			chatroom.getOwnerId(),
			chatroom.getRegDate(),
			chatroom.getLastMsgSeq(),
			chatroom.getTitle(),
			chatroom.getReplyId(),
			chatroom.getfMatchingSeq(),
			chatroom.getItemCount()
		});
	}

	public void deleteChatRoom(int chat_room_seq) {
		String query = "DELETE FROM T_NF_CHAT_ROOM WHERE chat_room_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { chat_room_seq });
	}

	public void updateChatRoom(ChatRoom chatroom) { 
		String query = "" + 
				"UPDATE T_NF_CHAT_ROOM SET " +
				"	chat_room_seq = ?, " +
				"	chat_room_type = ?, " +
				"	owner_id = ?, " +
				"	reg_date = ?, " +
				"	last_msg_seq = ?, " +
				"	title = ?, " +
				"	reply_id = ?, " +
				"	f_matching_seq = ?, " +
				"	item_count = ? " +
				"WHERE chat_room_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			chatroom.getChatRoomSeq(),
			chatroom.getChatRoomType(),
			chatroom.getOwnerId(),
			chatroom.getRegDate(),
			chatroom.getLastMsgSeq(),
			chatroom.getTitle(),
			chatroom.getReplyId(),
			chatroom.getfMatchingSeq(),
			chatroom.getItemCount()
		});
	}

	public ChatRoom getChatRoom(int chat_room_seq) {
		String query = "" + 
				"SELECT chat_room_seq, chat_room_type, owner_id, reg_date, last_msg_seq, title, reply_id, f_matching_seq, item_count " +
				"FROM T_NF_CHAT_ROOM " +
				"WHERE chat_room_seq = ? ";
		return (ChatRoom)this.jdbcTemplate.queryForObject(query, new Object[] { chat_room_seq }, this.chatroomMapper);
	}

	public List<ChatRoom> getChatRoomList(int page, int itemCountPerPage) {
		String query = "" +
				"SELECT TOP "+ itemCountPerPage +" chat_room_seq, chat_room_type, owner_id, reg_date, last_msg_seq, title, reply_id, f_matching_seq, item_count " +
				"FROM T_NF_CHAT_ROOM " +
				"WHERE chat_room_seq <= ( " +
				"	SELECT MIN(chat_room_seq) " +
				"	FROM ( " +
				"		SELECT TOP "+ ((page-1) * itemCountPerPage + 1) +" chat_room_seq " +
				"		FROM T_NF_CHAT_ROOM " +
				"		ORDER BY chat_room_seq DESC " +
				"	) AS A) " +
				"ORDER BY chat_room_seq DESC";
		return (List<ChatRoom>)this.jdbcTemplate.query(query, this.chatroomMapper);
	}
}
