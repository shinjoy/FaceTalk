package kr.nomad.mars;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.nomad.mars.dao.BannerAdDao;
import kr.nomad.mars.dao.EventCommentDao;
import kr.nomad.mars.dao.EventDao;
import kr.nomad.mars.dao.FaqDao;
import kr.nomad.mars.dao.NoticeDao;
import kr.nomad.mars.dao.QnaDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dto.BannerAd;
import kr.nomad.mars.dto.Event;
import kr.nomad.mars.dto.Faq;
import kr.nomad.mars.dto.Notice;
import kr.nomad.mars.dto.Qna;
import kr.nomad.mars.dto.User;
import kr.nomad.util.F;
import kr.nomad.util.Paging;
import kr.nomad.util.Response;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

@Controller
public class MobileController {

	@Autowired
	NoticeDao noticeDao;

	@Autowired
	FaqDao faqDao;

	@Autowired
	QnaDao qnaDao;

	@Autowired
	EventDao eventDao;
	
	@Autowired
	EventCommentDao eventCommentDao;
	
	@Autowired
	UserDao userDao;
	
	@Autowired BannerAdDao bannerAdDao;
	
	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;

	// 이용약관
	@RequestMapping("/m/terms_use.go")
	public String mTermsUseController(
			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
			HttpSession session, Model model) {

		return "/m/terms_use";
	}

	// 개인정보보호정책
	@RequestMapping("/m/terms_personal.go")
	public String mTermsPersonalController(
			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
			HttpSession session, Model model) {

		return "/m/terms_personal";
	}
	
	/********************************************************************************
	 * 공지사항 공지
	 * 
	 * @param seq
	 * @param model
	 * @return
	 */
	@RequestMapping("/m/notice/notice.go")
	public String mNoticeController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {
		// User loginUser =
		// userDao.getUser(session.getAttribute("USER_ID").toString());

		// model.addAttribute("loginUser", loginUser);
		model.addAttribute("keyword", keyword);
		model.addAttribute("ctrl", ctrl);
		return "m/notice/notice";
	}

	@RequestMapping("/m/notice/notice_list.go")
	public String mNoticeListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

		if (keyword.equals("")) {

			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount();

		} else {

			list = noticeDao.getNoticeMainList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = noticeDao.getNoticeMainCount(keyword);
		}

		// 페이징
		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "m/notice/notice_list";
	}

	// 공지사항 상세보기 페이지
	@RequestMapping("/m/notice/notice_view.go")
	public String mNoticeViewController(
			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		Notice notice = null;
		if (seq == 0) {
			notice = new Notice();
		} else {
			notice = noticeDao.getNotice(seq);
		}

		// model.addAttribute("loginUser", loginUser);
		model.addAttribute("notice", notice);
		model.addAttribute("ctrl", ctrl);
		return "m/notice/notice_view";
	}

	/********************************************************************************
	 * 메인 팝업 공지
	 * 
	 * @param seq
	 * @param model
	 * @return
	 */

	@RequestMapping("/m/popup/popup.go")
	public String mPopupController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		Notice notice = (Notice) noticeDao.getPopupTopList();

		model.addAttribute("notice", notice);

		return "m/popup/popup";
	}

	@RequestMapping("/m/popup/popup_list.go")
	public String mPopupListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		List<Notice> list = null;
		int count = 0;
		int notiType = 10;

		if (keyword.equals("")) {

			list = noticeDao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE,notiType);
			count = noticeDao.getNoticeMainCount(notiType);

		} else {

			list = noticeDao.getNoticeMainList(keyword, page,ITEM_COUNT_PER_PAGE, notiType);
			count = noticeDao.getNoticeMainCount(keyword, notiType);

		}

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "m/popup/popup_list";
	}

	// 팝업 상세보기 페이지
	@RequestMapping("/m/popup/popup_view.go")
	public String mPopupViewController(
			@RequestParam(value = "seq", required = false, defaultValue = "0") int seq,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		Notice notice = null;
		if (seq == 0) {
			notice = new Notice();
		} else {
			notice = noticeDao.getNotice(seq);
		}

		// model.addAttribute("loginUser", loginUser);
		model.addAttribute("notice", notice);
		model.addAttribute("ctrl", ctrl);
		return "/m/popup/popup_view";
	}

	/********************************************************************************
	 * FAQ 공지
	 * 
	 * @param seq
	 * @param model
	 * @return
	 */
	@RequestMapping("/m/faq/faq.go")
	public String mFaqController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {
		// User loginUser =
		// userDao.getUser(session.getAttribute("USER_ID").toString());

		// model.addAttribute("loginUser", loginUser);
		model.addAttribute("keyword", keyword);
		model.addAttribute("ctrl", ctrl);
		return "m/faq/faq";
	}

	@RequestMapping("/m/faq/faq_list.go")
	public String mFaqListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		List<Faq> list = null;
		int count = 0;

		if (keyword.equals("")) {

			list = faqDao.getFaqList(page, ITEM_COUNT_PER_PAGE);
			count = faqDao.getCount();

		} else {

			list = faqDao.getFaqList(keyword, page, ITEM_COUNT_PER_PAGE);
			count = faqDao.getCount(keyword);

		}

		// 페이징
		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "m/faq/faq_list";
	}

	// FAQ 공지 상세보기 페이지
	@RequestMapping("/m/faq/faq_view.go")
	public String mFaqViewController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		Faq faq = null;
		
		if (noticeSeq==0) {
			faq = new Faq();
		} else {
			faq = faqDao.getFaq(noticeSeq);
		}


		model.addAttribute("noticeSeq", noticeSeq);
		model.addAttribute("faq", faq);
		model.addAttribute("ctrl", ctrl);
		return "m/faq/faq_view";
	}

	/********************************************************************************
	 * 1:1 문의
	 * 
	 * @param seq
	 * @param model
	 * @return
	 */
	@RequestMapping("/m/qna/qna.go")
	public String mQnaController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {

		User loginUser =userDao.getUser(userId);

		model.addAttribute("loginUser", loginUser.getUserId());
		return "m/qna/qna";
	}

	@RequestMapping("/m/qna/qna_list.go")
	public String mQnaListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {

		List<Qna> list = null;
		int count = 0;

		list = qnaDao.getQnaList(page, ITEM_COUNT_PER_PAGE,userId);
		count = qnaDao.getCountMobile(userId);
		
		// 페이징
		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "m/qna/qna_list";
	}

	// Qna 공지 상세보기 페이지
	@RequestMapping("/m/qna/qna_view.go")
	public String mQnaViewController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "ctrl", required = false, defaultValue = "0") int ctrl,
			HttpSession session, Model model) {

		Qna qna = null;
		if (noticeSeq == 0) {
			qna = new Qna();
		} else {
			qna = qnaDao.getQna(noticeSeq);
		}

		List commentList = qnaDao.getQnaList(noticeSeq, page,ITEM_COUNT_PER_PAGE);

		model.addAttribute("commentList", commentList);
		model.addAttribute("noticeSeq", noticeSeq);
		model.addAttribute("qna", qna);
		model.addAttribute("ctrl", ctrl);
		return "m/qna/qna_view";
	}
	
	
	// Qna 작성하기
	@RequestMapping("/m/qna/qna_edit.go")
	public String adEditController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {
		
		User loginUser =userDao.getUser(userId);
		
		model.addAttribute("loginUser", loginUser.getUserId());
		
		return "/m/qna/qna_edit";
	}

//	/**
//	 * 첨부파일_업로드
//	 * @param userId
//	 * @param userPw
//	 * @return
//	 */
//	@RequestMapping("/m/qna/qna_edit_do.go")
//	public String adEditDoController(
//			@RequestParam(value = "qnaSeq", required = false, defaultValue = "0") int qnaSeq,
//			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
//			@RequestParam(value = "contents", required = false, defaultValue = "") String contents,
//			@RequestParam(value = "title", required = false, defaultValue = "") String title,
//			HttpSession session, HttpServletResponse res, Model model)
//			throws IllegalStateException, IOException {
//		
//		Map<String, Object> map = new HashMap<String, Object>();
//		boolean result = true;
//		String message = "";
//		
//		
//		if (qnaSeq == 0) {
//
//			Qna qna = new Qna();
//			qna.setUserId(userId);
//			qna.setTitle(title);
//			qna.setContentsText(contents);
//			qna.setContentsHtml(contents);
//			qnaDao.addQna(qna);
//			
//			result = true;
//			message = "등록되었습니다.";
//			
//
//		} else {
//
//			Qna qna = qnaDao.getQna(qnaSeq);
//			qna.setTitle(title);
//			qna.setContentsText(contents);
//			qna.setContentsHtml(contents);
//			qnaDao.updateCommentQna(qna);
//			
//			result = true;
//			message = "수정되었습니다.";
//			
//		}
//
//		 map.put("qnaSeq", qnaSeq);
//		 map.put("result", result);
//		 map.put("message", message);
//		
//		JSONObject jsonObject = JSONObject.fromObject(map);
//		Response.responseWrite(res, jsonObject);
//		return null;
//	}	
			
	/**
	 * 첨부파일_업로드
	 * @param userId
	 * @param userPw
	 * @return
	 */
	@RequestMapping("/m/qna/qna_edit_do.go")
	public String adEditDoController(HttpSession session,
			HttpServletResponse res, Model model, HttpServletRequest req)
			throws IllegalStateException, IOException {

		Map<String, Object> map = new HashMap<String, Object>();

		req.setCharacterEncoding("utf-8");

		int fileMaxBiteSize = FILE_MAX_SIZE * 1024 * 1024;
		File file = null;

		FILE_PATH = "/files/qna/";
		FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;

		boolean result = true;
		String message = "";

		try {

			// 파일 업로드.
			// 폼에서 가져온 인자값을 얻기 위해 request 객체 전달, 업로드 경로, 파일 최대 크기, 한글처리, 파일 중복처리
			MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH,fileMaxBiteSize, "UTF-8", new DefaultFileRenamePolicy());

			// 폼에서 입력한 값을 가져옴
			int qnaSeq = Integer.parseInt(F.nullCheck(multi.getParameter("noticeSeq"), "0"));
			String userId = F.nullCheck(multi.getParameter("userId"), "");
			String contents = F.nullCheck(multi.getParameter("contents"), "");
			String title = F.nullCheck(multi.getParameter("title"), "");

			String MAIN_IMG = "";
			String THUMB_IMG = "";

			// 업로드한 파일들을 Enumeration 타입으로 반환.
			// Enumeration형은 데이터를 뽑아올때 유용한 인터페이스
			Enumeration files = multi.getFileNames();

			String sName = "";

			while (files.hasMoreElements()) {
				String elementName = (String) files.nextElement();

				file = multi.getFile(elementName);
				int i = 0;
				if (file != null) {
					if (elementName.equals("fileName")) {
						String sPath = file.getParent() + "/";
						sName = file.getName();
					}
				}
			}

			if (qnaSeq == 0) {

				Qna qna = new Qna();
				qna.setUserId(userId);
				qna.setTitle(title);
				qna.setContentsText(contents);
				qna.setContentsHtml(contents);
				qna.setFiles(FILE_PATH + sName);
				qnaDao.addQna(qna);

				result = true;
				message = "등록되었습니다.";

			} else {

				Qna qna = qnaDao.getQna(qnaSeq);
				qna.setTitle(title);
				qna.setContentsText(contents);
				qna.setContentsHtml(contents);
				
				if (sName.equals("") == false) {
					qna.setFiles(FILE_PATH + sName);
				}
				
				qnaDao.updateCommentQna(qna);

				result = true;
				message = "수정되었습니다.";

			}

			map.put("qnaSeq", qnaSeq);
			map.put("result", result);
			map.put("message", message);

		} catch (Exception e) {
			// TODO: handle exception
		}

		return "redirect:/m/qna/qna.go";
	}
	
	
	
	
	/********************************************************************************
	 * 이벤트 공지
	 * @param seq
	 * @param model
	 * @return
	 */
	@RequestMapping("/m/event/event.go")
	public String mEventController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {
		
		model.addAttribute("userId",userId);

		return "m/event/event";
	}

	@RequestMapping("/m/event/event_list.go")
	public String mEventListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {

		List<Event> list = null;
		int count = 0;
		
		Date date = new Date();
		SimpleDateFormat today = new SimpleDateFormat("yyyy-MM-dd");
		String todayData = today.format(date);

		list = eventDao.getEventList(page, ITEM_COUNT_PER_PAGE);
		count = eventDao.getCount();

		// 페이징
		String paging = Paging.getPaging2(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);
		
		model.addAttribute("userId", userId);
		model.addAttribute("todayData", todayData);
		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("currentPage", page);
		return "m/event/event_list";
	}

	// 이벤트 공지 상세보기 페이지
	@RequestMapping("/m/event/event_view.go")
	public String mEventViewController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpSession session, Model model) {

		Event event = null;
		
		if (noticeSeq == 0) {
			event = new Event();
		} else {
			event = eventDao.getEvent(noticeSeq);
		}
		
		List commentList = eventCommentDao.getEventCommentList(noticeSeq, page,ITEM_COUNT_PER_PAGE);
		int bbsCount = eventCommentDao.getCount(noticeSeq);

		model.addAttribute("userId", userId);
		model.addAttribute("commentList", commentList);
		model.addAttribute("noticeSeq", noticeSeq);
		model.addAttribute("event", event);
		
		return "m/event/event_view";
	}
	
	
	// 배너광고 리스트 
	@RequestMapping("/m/banner_list.go")
	public String bannerListController(
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		
		List list = new ArrayList();
		int count = 0;
		BannerAd banner = new BannerAd();
		
		try {
							
			if (banner != null) {
				banner = bannerAdDao.getBannerAdRandomOne();
				bannerAdDao.updateBannerAdView(banner.getBannerSeq());
			}	
			
			map.put("result", true);
			map.put("banner", banner);
			
		} catch (Exception e) {
			
			if(banner == null){
				
				map.put("result", false);
				map.put("message", e.getMessage());
			}
			

		}
		
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
		
	}
	
}
